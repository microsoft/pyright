{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "Pyright Configuration Schema",
  "allowComments": true,
  "allowTrailingCommas": true,
  "type": "object",
  "definitions": {
    "diagnostic": {
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "type": "string",
          "enum": [
            "none",
            "information",
            "warning",
            "error"
          ]
        }
      ]
    },
    "extraPaths": {
      "type": "array",
      "title": "Additional import search resolution paths",
      "items": {
        "type": "string",
        "title": "Additional import search resolution path",
        "default": "",
        "pattern": "^(.*)$"
      }
    },
    "pythonVersion": {
      "type": "string",
      "title": "Python version to assume during type analysis",
      "default": "",
      "examples": [
        "3.7"
      ],
      "pattern": "^3\\.[0-9]+$"
    },
    "pythonPlatform": {
      "type": "string",
      "title": "Python platform to assume during type analysis",
      "default": "",
      "examples": [
        "Linux"
      ],
      "pattern": "^(Linux|Windows|Darwin|All)$"
    },
    "disableBytesTypePromotions": {
      "type": "boolean",
      "title": "Do not treat `bytearray` and `memoryview` as implicit subtypes of `bytes`",
      "default": false
    },
    "strictListInference": {
      "type": "boolean",
      "title": "Infer strict types for list expressions",
      "default": false
    },
    "strictSetInference": {
      "type": "boolean",
      "title": "Infer strict types for set expressions",
      "default": false
    },
    "strictDictionaryInference": {
      "type": "boolean",
      "title": "Infer strict types for dictionary expressions",
      "default": false
    },
    "analyzeUnannotatedFunctions": {
      "type": "boolean",
      "title": "Analyze and report diagnostics for functions that have no annotations",
      "default": true
    },
    "strictParameterNoneValue": {
      "type": "boolean",
      "title": "Allow implicit Optional when default parameter value is None",
      "default": true
    },
    "enableExperimentalFeatures": {
      "type": "boolean",
      "title": "Enable the use of experimental features that are not part of the Python typing spec",
      "default": false
    },
    "enableTypeIgnoreComments": {
      "type": "boolean",
      "title": "Allow \"# type: ignore\" comments",
      "default": true
    },
    "deprecateTypingAliases": {
      "type": "boolean",
      "title": "Treat typing-specific aliases to standard types as deprecated",
      "default": false
    },
    "reportGeneralTypeIssues": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of general type issues",
      "default": "error"
    },
    "reportPropertyTypeMismatch": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of property getter/setter type mismatches",
      "default": "none"
    },
    "reportFunctionMemberAccess": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of member accesses on function objects",
      "default": "error"
    },
    "reportMissingImports": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of imports that cannot be resolved",
      "default": "error"
    },
    "reportMissingModuleSource": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of imports that cannot be resolved to source files",
      "default": "warning"
    },
    "reportInvalidTypeForm": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of type expressions that use an invalid form",
      "default": "error"
    },
    "reportMissingTypeStubs": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of imports that cannot be resolved to type stub files",
      "default": "none"
    },
    "reportImportCycles": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of module imports that create cycles in import graph",
      "default": "none"
    },
    "reportUnusedImport": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of imported symbols that are not referenced within the source file",
      "default": "none"
    },
    "reportUnusedClass": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of private classes that are not accessed",
      "default": "none"
    },
    "reportUnusedFunction": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of private functions or methods that are not accessed",
      "default": "none"
    },
    "reportUnusedVariable": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of local variables that are not accessed",
      "default": "none"
    },
    "reportDuplicateImport": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of symbols or modules that are imported more than once",
      "default": "none"
    },
    "reportWildcardImportFromLibrary": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of wildcard import from external library",
      "default": "warning"
    },
    "reportAbstractUsage": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of attempted instantiation of abstract class",
      "default": "error"
    },
    "reportArgumentType": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of incompatible argument type",
      "default": "error"
    },
    "reportAssertTypeFailure": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of type mismatch detected by typing.assert_type call",
      "default": "error"
    },
    "reportAssignmentType": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of type incompatibilities for assignments",
      "default": "error"
    },
    "reportAttributeAccessIssue": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of issues related to attribute accesses",
      "default": "error"
    },
    "reportCallIssue": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of issues related to call expressions and arguments",
      "default": "error"
    },
    "reportInconsistentOverload": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of inconsistencies between function overload signatures",
      "default": "error"
    },
    "reportIndexIssue": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of issues related to index operations and expressions",
      "default": "error"
    },
    "reportInvalidTypeArguments": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of invalid type argument usage",
      "default": "error"
    },
    "reportNoOverloadImplementation": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of an overloaded function or method with a missing implementation",
      "default": "error"
    },
    "reportOperatorIssue": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of diagnostics related to unary and binary operators",
      "default": "error"
    },
    "reportOptionalSubscript": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of attempts to subscript (index) a variable with Optional type",
      "default": "error"
    },
    "reportOptionalMemberAccess": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of attempts to access a member of a variable with Optional type",
      "default": "error"
    },
    "reportOptionalCall": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of attempts to call a variable with Optional type",
      "default": "error"
    },
    "reportOptionalIterable": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of attempts to use an Optional type as an iterable value",
      "default": "error"
    },
    "reportOptionalContextManager": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of attempts to use an Optional type as a parameter to a with statement",
      "default": "error"
    },
    "reportOptionalOperand": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of attempts to use an Optional type as an operand for a binary or unary operator",
      "default": "error"
    },
    "reportRedeclaration": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of attempts to declare the type of a symbol multiple times",
      "default": "error"
    },
    "reportReturnType": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of function return type incompatibility",
      "default": "error"
    },
    "reportTypedDictNotRequiredAccess": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of attempts to access a non-required key in a TypedDict without a check for its presence",
      "default": "error"
    },
    "reportUntypedFunctionDecorator": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of function decorators without type annotations, which obscure function types",
      "default": "none"
    },
    "reportUntypedClassDecorator": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of class decorators without type annotations, which obscure class types",
      "default": "none"
    },
    "reportUntypedBaseClass": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of a base class of an unknown type, which obscures most type checking for the class",
      "default": "none"
    },
    "reportUntypedNamedTuple": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of a named tuple definition that does not contain type information",
      "default": "none"
    },
    "reportPrivateUsage": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of private variables and functions used outside of the owning class or module and usage of protected members outside of subclasses",
      "default": "none"
    },
    "reportTypeCommentUsage": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of deprecated type comment usage",
      "default": "none"
    },
    "reportPrivateImportUsage": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of improper usage of symbol imported from a \"py.typed\" module that is not re-exported from that module",
      "default": "error"
    },
    "reportConstantRedefinition": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of attempts to redefine variables that are in all-caps",
      "default": "none"
    },
    "reportDeprecated": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of use of deprecated class or function",
      "default": "none"
    },
    "reportIncompatibleMethodOverride": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of method overrides in subclasses that redefine the method in an incompatible way",
      "default": "error"
    },
    "reportIncompatibleVariableOverride": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of overrides in subclasses that redefine a variable in an incompatible way",
      "default": "error"
    },
    "reportInconsistentConstructor": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of __init__ and __new__ methods whose signatures are inconsistent",
      "default": "none"
    },
    "reportOverlappingOverload": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of function overloads that overlap in signature and obscure each other or do not agree on return type",
      "default": "error"
    },
    "reportPossiblyUnboundVariable": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of attempts to use variable that is possibly unbound on some code paths",
      "default": "error"
    },
    "reportMissingSuperCall": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of missing call to parent class for inherited `__init__` methods",
      "default": "none"
    },
    "reportUninitializedInstanceVariable": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of instance variables that are not initialized in the constructor",
      "default": "none"
    },
    "reportInvalidStringEscapeSequence": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of invalid escape sequences used within string literals",
      "default": "warning"
    },
    "reportUnknownParameterType": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting input and return parameters whose types are unknown",
      "default": "none"
    },
    "reportUnknownArgumentType": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting argument expressions whose types are unknown",
      "default": "none"
    },
    "reportUnknownLambdaType": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting input and return parameters for lambdas whose types are unknown",
      "default": "none"
    },
    "reportUnknownVariableType": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting local variables whose types are unknown",
      "default": "none"
    },
    "reportUnknownMemberType": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting class and instance variables whose types are unknown",
      "default": "none"
    },
    "reportMissingParameterType": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting input parameters that are missing a type annotation",
      "default": "none"
    },
    "reportMissingTypeArgument": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting generic class reference with missing type arguments",
      "default": "none"
    },
    "reportInvalidTypeVarUse": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting improper use of type variables within function signatures",
      "default": "warning"
    },
    "reportCallInDefaultInitializer": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting usage of function calls within a default value initializer expression",
      "default": "none"
    },
    "reportUnnecessaryIsInstance": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting calls to 'isinstance' or 'issubclass' where the result is statically determined to be always true",
      "default": "none"
    },
    "reportUnnecessaryCast": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting calls to 'cast' that are unnecessary",
      "default": "none"
    },
    "reportUnnecessaryComparison": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting the use of '==' or '!=' comparisons that are unnecessary",
      "default": "none"
    },
    "reportUnnecessaryContains": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting the use of 'in' operations that are unnecessary",
      "default": "none"
    },
    "reportAssertAlwaysTrue": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting assert expressions that will always evaluate to true",
      "default": "warning"
    },
    "reportSelfClsParameterName": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting missing or misnamed self parameters",
      "default": "warning"
    },
    "reportImplicitStringConcatenation": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting usage of implicit concatenation of string literals",
      "default": "none"
    },
    "reportUnboundVariable": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of attempts to use an unbound variable",
      "default": "error"
    },
    "reportUnhashable": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of unhashable object in container that requires hashability",
      "default": "error"
    },
    "reportUndefinedVariable": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of attempts to use an undefined variable",
      "default": "error"
    },
    "reportInvalidStubStatement": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of type stub statements that do not conform to PEP 484",
      "default": "none"
    },
    "reportIncompleteStub": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of incomplete type stubs that declare a module-level __getattr__ function",
      "default": "none"
    },
    "reportUnsupportedDunderAll": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of unsupported operations performed on __all__",
      "default": "warning"
    },
    "reportUnusedCallResult": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of call expressions whose results are not consumed",
      "default": "none"
    },
    "reportUnusedCoroutine": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of call expressions that returns Coroutine whose results are not consumed",
      "default": "error"
    },
    "reportUnusedExcept": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of unreachable except clauses",
      "default": "error"
    },
    "reportUnusedExpression": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of simple expressions whose value is not used in any way",
      "default": "warning"
    },
    "reportUnnecessaryTypeIgnoreComment": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of '# type: ignore' comments that have no effect'",
      "default": "none"
    },
    "reportMatchNotExhaustive": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of 'match' statements that do not exhaustively match all possible values",
      "default": "none"
    },
    "reportShadowedImports": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting of shadowed imports of stdlib modules",
      "default": "none"
    },
    "reportImplicitOverride": {
      "$ref": "#/definitions/diagnostic",
      "title": "Controls reporting overridden methods that are missing an `@override` decorator",
      "default": "none"
    }
  },
  "properties": {
    "extends": {
      "type": "string",
      "title": "Path to configuration file that this configuration extends",
      "pattern": "^(.*)$"
    },
    "include": {
      "type": "array",
      "title": "Files and directories included in type analysis",
      "items": {
        "type": "string",
        "title": "File or directory to include in type analysis",
        "pattern": "^(.*)$"
      }
    },
    "exclude": {
      "type": "array",
      "title": "Files and directories excluded from type analysis",
      "items": {
        "type": "string",
        "title": "File or directory to exclude from type analysis",
        "pattern": "^(.*)$"
      }
    },
    "ignore": {
      "type": "array",
      "title": "Files and directories whose diagnostics are suppressed",
      "items": {
        "type": "string",
        "title": "File or directory where diagnostics should be suppressed",
        "pattern": "^(.*)$"
      }
    },
    "strict": {
      "type": "array",
      "title": "Files and directories that should use 'strict' type checking rules",
      "items": {
        "type": "string",
        "title": "File or directory that should use 'strict' type checking rules",
        "pattern": "^(.*)$"
      }
    },
    "defineConstant": {
      "type": "object",
      "title": "Identifiers that should be treated as constants",
      "properties": {
      },
      "additionalProperties": {
          "type": ["string", "boolean"],
          "title": "Value of constant (boolean or string)"
      }
    },
    "typeCheckingMode": {
      "type": "string",
      "enum": [
        "off",
        "basic",
        "standard",
        "strict"
      ],
      "title": "Specifies the default rule set to use for type checking",
      "default": "standard"
    },
    "useLibraryCodeForTypes": {
      "type": "boolean",
      "title": "Use library implementations to extract type information when type stub is not present",
      "default": true
    },
    "typeshedPath": {
      "type": "string",
      "title": "Path to directory containing typeshed type stub files",
      "default": "",
      "pattern": "^(.*)$"
    },
    "stubPath": {
      "type": "string",
      "title": "Path to directory containing custom type stub files",
      "default": "./typings",
      "examples": [
        "src/typestubs"
      ],
      "pattern": "^(.*)$"
    },
    "disableBytesTypePromotions": {
      "$ref": "#/definitions/disableBytesTypePromotions"
    },
    "strictListInference": {
      "$ref": "#/definitions/strictListInference"
    },
    "strictSetInference": {
      "$ref": "#/definitions/strictSetInference"
    },
    "strictDictionaryInference": {
      "$ref": "#/definitions/strictDictionaryInference"
    },
    "analyzeUnannotatedFunctions": {
      "$ref": "#/definitions/analyzeUnannotatedFunctions"
    },
    "strictParameterNoneValue": {
      "$ref": "#/definitions/strictParameterNoneValue"
    },
    "enableExperimentalFeatures": {
      "$ref": "#/definitions/enableExperimentalFeatures"
    },
    "enableTypeIgnoreComments": {
      "$ref": "#/definitions/enableTypeIgnoreComments"
    },
    "deprecateTypingAliases": {
      "$ref": "#/definitions/deprecateTypingAliases"
    },
    "reportGeneralTypeIssues": {
      "$ref": "#/definitions/reportGeneralTypeIssues"
    },
    "reportPropertyTypeMismatch": {
      "$ref": "#/definitions/reportPropertyTypeMismatch"
    },
    "reportFunctionMemberAccess": {
      "$ref": "#/definitions/reportFunctionMemberAccess"
    },
    "reportMissingImports": {
      "$ref": "#/definitions/reportMissingImports"
    },
    "reportMissingModuleSource": {
      "$ref": "#/definitions/reportMissingModuleSource"
    },
    "reportInvalidTypeForm": {
      "$ref": "#/definitions/reportInvalidTypeForm"
    },
    "reportMissingTypeStubs": {
      "$ref": "#/definitions/reportMissingTypeStubs"
    },
    "reportImportCycles": {
      "$ref": "#/definitions/reportImportCycles"
    },
    "reportUnusedImport": {
      "$ref": "#/definitions/reportUnusedImport"
    },
    "reportUnusedClass": {
      "$ref": "#/definitions/reportUnusedClass"
    },
    "reportUnusedFunction": {
      "$ref": "#/definitions/reportUnusedFunction"
    },
    "reportUnusedVariable": {
      "$ref": "#/definitions/reportUnusedVariable"
    },
    "reportDuplicateImport": {
      "$ref": "#/definitions/reportDuplicateImport"
    },
    "reportWildcardImportFromLibrary": {
      "$ref": "#/definitions/reportWildcardImportFromLibrary"
    },
    "reportAbstractUsage": {
      "$ref": "#/definitions/reportAbstractUsage"
    },
    "reportArgumentType": {
      "$ref": "#/definitions/reportArgumentType"
    },
    "reportAssertTypeFailure": {
      "$ref": "#/definitions/reportAssertTypeFailure"
    },
    "reportAssignmentType": {
      "$ref": "#/definitions/reportAssignmentType"
    },
    "reportAttributeAccessIssue": {
      "$ref": "#/definitions/reportAttributeAccessIssue"
    },
    "reportCallIssue": {
      "$ref": "#/definitions/reportCallIssue"
    },
    "reportInconsistentOverload": {
      "$ref": "#/definitions/reportInconsistentOverload"
    },
    "reportIndexIssue": {
      "$ref": "#/definitions/reportIndexIssue"
    },
    "reportInvalidTypeArguments": {
      "$ref": "#/definitions/reportInvalidTypeArguments"
    },
    "reportNoOverloadImplementation": {
      "$ref": "#/definitions/reportNoOverloadImplementation"
    },
    "reportOperatorIssue": {
      "$ref": "#/definitions/reportOperatorIssue"
    },
    "reportOptionalSubscript": {
      "$ref": "#/definitions/reportOptionalSubscript"
    },
    "reportOptionalMemberAccess": {
      "$ref": "#/definitions/reportOptionalMemberAccess"
    },
    "reportOptionalCall": {
      "$ref": "#/definitions/reportOptionalCall"
    },
    "reportOptionalIterable": {
      "$ref": "#/definitions/reportOptionalIterable"
    },
    "reportOptionalContextManager": {
      "$ref": "#/definitions/reportOptionalContextManager"
    },
    "reportOptionalOperand": {
      "$ref": "#/definitions/reportOptionalOperand"
    },
    "reportRedeclaration": {
      "$ref": "#/definitions/reportRedeclaration"
    },
    "reportReturnType": {
      "$ref": "#/definitions/reportReturnType"
    },
    "reportTypedDictNotRequiredAccess": {
      "$ref": "#/definitions/reportTypedDictNotRequiredAccess"
    },
    "reportUntypedFunctionDecorator": {
      "$ref": "#/definitions/reportUntypedFunctionDecorator"
    },
    "reportUntypedClassDecorator": {
      "$ref": "#/definitions/reportUntypedClassDecorator"
    },
    "reportUntypedBaseClass": {
      "$ref": "#/definitions/reportUntypedBaseClass"
    },
    "reportUntypedNamedTuple": {
      "$ref": "#/definitions/reportUntypedNamedTuple"
    },
    "reportPrivateUsage": {
      "$ref": "#/definitions/reportPrivateUsage"
    },
    "reportTypeCommentUsage": {
      "$ref": "#/definitions/reportTypeCommentUsage"
    },
    "reportPrivateImportUsage": {
      "$ref": "#/definitions/reportPrivateImportUsage"
    },
    "reportConstantRedefinition": {
      "$ref": "#/definitions/reportConstantRedefinition"
    },
    "reportDeprecated": {
      "$ref": "#/definitions/reportDeprecated"
    },
    "reportIncompatibleMethodOverride": {
      "$ref": "#/definitions/reportIncompatibleMethodOverride"
    },
    "reportIncompatibleVariableOverride": {
      "$ref": "#/definitions/reportIncompatibleVariableOverride"
    },
    "reportInconsistentConstructor": {
      "$ref": "#/definitions/reportInconsistentConstructor"
    },
    "reportOverlappingOverload": {
      "$ref": "#/definitions/reportOverlappingOverload"
    },
    "reportPossiblyUnboundVariable": {
      "$ref": "#/definitions/reportPossiblyUnboundVariable"
    },
    "reportMissingSuperCall": {
      "$ref": "#/definitions/reportMissingSuperCall"
    },
    "reportUninitializedInstanceVariable": {
      "$ref": "#/definitions/reportUninitializedInstanceVariable"
    },
    "reportInvalidStringEscapeSequence": {
      "$ref": "#/definitions/reportInvalidStringEscapeSequence"
    },
    "reportUnknownParameterType": {
      "$ref": "#/definitions/reportUnknownParameterType"
    },
    "reportUnknownArgumentType": {
      "$ref": "#/definitions/reportUnknownArgumentType"
    },
    "reportUnknownLambdaType": {
      "$ref": "#/definitions/reportUnknownLambdaType"
    },
    "reportUnknownVariableType": {
      "$ref": "#/definitions/reportUnknownVariableType"
    },
    "reportUnknownMemberType": {
      "$ref": "#/definitions/reportUnknownMemberType"
    },
    "reportMissingParameterType": {
      "$ref": "#/definitions/reportMissingParameterType"
    },
    "reportMissingTypeArgument": {
      "$ref": "#/definitions/reportMissingTypeArgument"
    },
    "reportInvalidTypeVarUse": {
      "$ref": "#/definitions/reportInvalidTypeVarUse"
    },
    "reportCallInDefaultInitializer": {
      "$ref": "#/definitions/reportCallInDefaultInitializer"
    },
    "reportUnnecessaryIsInstance": {
      "$ref": "#/definitions/reportUnnecessaryIsInstance"
    },
    "reportUnnecessaryCast": {
      "$ref": "#/definitions/reportUnnecessaryCast"
    },
    "reportUnnecessaryComparison": {
      "$ref": "#/definitions/reportUnnecessaryComparison"
    },
    "reportUnnecessaryContains": {
      "$ref": "#/definitions/reportUnnecessaryContains"
    },
    "reportAssertAlwaysTrue": {
      "$ref": "#/definitions/reportAssertAlwaysTrue"
    },
    "reportSelfClsParameterName": {
      "$ref": "#/definitions/reportSelfClsParameterName"
    },
    "reportImplicitStringConcatenation": {
      "$ref": "#/definitions/reportImplicitStringConcatenation"
    },
    "reportUnboundVariable": {
      "$ref": "#/definitions/reportUnboundVariable"
    },
    "reportUnhashable": {
      "$ref": "#/definitions/reportUnhashable"
    },
    "reportUndefinedVariable": {
      "$ref": "#/definitions/reportUndefinedVariable"
    },
    "reportInvalidStubStatement": {
      "$ref": "#/definitions/reportInvalidStubStatement"
    },
    "reportIncompleteStub": {
      "$ref": "#/definitions/reportIncompleteStub"
    },
    "reportUnsupportedDunderAll": {
      "$ref": "#/definitions/reportUnsupportedDunderAll"
    },
    "reportUnusedCallResult": {
      "$ref": "#/definitions/reportUnusedCallResult"
    },
    "reportUnusedCoroutine": {
      "$ref": "#/definitions/reportUnusedCoroutine"
    },
    "reportUnusedExcept": {
      "$ref": "#/definitions/reportUnusedExcept"
    },
    "reportUnusedExpression": {
      "$ref": "#/definitions/reportUnusedExpression"
    },
    "reportUnnecessaryTypeIgnoreComment": {
      "$ref": "#/definitions/reportUnnecessaryTypeIgnoreComment"
    },
    "reportMatchNotExhaustive": {
      "$ref": "#/definitions/reportMatchNotExhaustive"
    },
    "reportShadowedImports": {
      "$ref": "#/definitions/reportShadowedImports"
    },
    "reportImplicitOverride": {
      "$ref": "#/definitions/reportImplicitOverride"
    },
    "extraPaths": {
      "$ref": "#/definitions/extraPaths"
    },
    "pythonVersion": {
      "$ref": "#/definitions/pythonVersion"
    },
    "pythonPlatform": {
      "$ref": "#/definitions/pythonPlatform"
    },
    "venvPath": {
      "type": "string",
      "title": "Path to directory containing a folder of virtual environments",
      "default": "",
      "pattern": "^(.*)$"
    },
    "venv": {
      "type": "string",
      "title": "Name of virtual environment subdirectory within venvPath",
      "default": "",
      "examples": [
        "python37"
      ],
      "pattern": "^(.*)$"
    },
    "verboseOutput": {
      "type": "boolean",
      "title": "Output verbose logging",
      "default": false
    },
    "executionEnvironments": {
      "type": "array",
      "title": "Analysis settings to use for specified subdirectories of code",
      "items": {
        "type": "object",
        "title": "Analysis settings to use for specified subdirectories of code",
        "required": [
          "root"
        ],
        "properties": {
          "root": {
            "type": "string",
            "title": "Path to code subdirectory to which these settings apply",
            "default": "",
            "pattern": "^(.*)$"
          },
          "disableBytesTypePromotions": {
            "$ref": "#/definitions/disableBytesTypePromotions"
          },
          "strictListInference": {
            "$ref": "#/definitions/strictListInference"
          },
          "strictSetInference": {
            "$ref": "#/definitions/strictSetInference"
          },
          "strictDictionaryInference": {
            "$ref": "#/definitions/strictDictionaryInference"
          },
          "analyzeUnannotatedFunctions": {
            "$ref": "#/definitions/analyzeUnannotatedFunctions"
          },
          "strictParameterNoneValue": {
            "$ref": "#/definitions/strictParameterNoneValue"
          },
          "enableExperimentalFeatures": {
            "$ref": "#/definitions/enableExperimentalFeatures"
          },
          "enableTypeIgnoreComments": {
            "$ref": "#/definitions/enableTypeIgnoreComments"
          },
          "deprecateTypingAliases": {
            "$ref": "#/definitions/deprecateTypingAliases"
          },
          "reportGeneralTypeIssues": {
            "$ref": "#/definitions/reportGeneralTypeIssues"
          },
          "reportPropertyTypeMismatch": {
            "$ref": "#/definitions/reportPropertyTypeMismatch"
          },
          "reportFunctionMemberAccess": {
            "$ref": "#/definitions/reportFunctionMemberAccess"
          },
          "reportMissingImports": {
            "$ref": "#/definitions/reportMissingImports"
          },
          "reportMissingModuleSource": {
            "$ref": "#/definitions/reportMissingModuleSource"
          },
          "reportInvalidTypeForm": {
            "$ref": "#/definitions/reportInvalidTypeForm"
          },
          "reportMissingTypeStubs": {
            "$ref": "#/definitions/reportMissingTypeStubs"
          },
          "reportImportCycles": {
            "$ref": "#/definitions/reportImportCycles"
          },
          "reportUnusedImport": {
            "$ref": "#/definitions/reportUnusedImport"
          },
          "reportUnusedClass": {
            "$ref": "#/definitions/reportUnusedClass"
          },
          "reportUnusedFunction": {
            "$ref": "#/definitions/reportUnusedFunction"
          },
          "reportUnusedVariable": {
            "$ref": "#/definitions/reportUnusedVariable"
          },
          "reportDuplicateImport": {
            "$ref": "#/definitions/reportDuplicateImport"
          },
          "reportWildcardImportFromLibrary": {
            "$ref": "#/definitions/reportWildcardImportFromLibrary"
          },
          "reportAbstractUsage": {
            "$ref": "#/definitions/reportAbstractUsage"
          },
          "reportArgumentType": {
            "$ref": "#/definitions/reportArgumentType"
          },
          "reportAssertTypeFailure": {
            "$ref": "#/definitions/reportAssertTypeFailure"
          },
          "reportAssignmentType": {
            "$ref": "#/definitions/reportAssignmentType"
          },
          "reportAttributeAccessIssue": {
            "$ref": "#/definitions/reportAttributeAccessIssue"
          },
          "reportCallIssue": {
            "$ref": "#/definitions/reportCallIssue"
          },
          "reportInconsistentOverload": {
            "$ref": "#/definitions/reportInconsistentOverload"
          },
          "reportIndexIssue": {
            "$ref": "#/definitions/reportIndexIssue"
          },
          "reportInvalidTypeArguments": {
            "$ref": "#/definitions/reportInvalidTypeArguments"
          },
          "reportNoOverloadImplementation": {
            "$ref": "#/definitions/reportNoOverloadImplementation"
          },
          "reportOperatorIssue": {
            "$ref": "#/definitions/reportOperatorIssue"
          },
          "reportOptionalSubscript": {
            "$ref": "#/definitions/reportOptionalSubscript"
          },
          "reportOptionalMemberAccess": {
            "$ref": "#/definitions/reportOptionalMemberAccess"
          },
          "reportOptionalCall": {
            "$ref": "#/definitions/reportOptionalCall"
          },
          "reportOptionalIterable": {
            "$ref": "#/definitions/reportOptionalIterable"
          },
          "reportOptionalContextManager": {
            "$ref": "#/definitions/reportOptionalContextManager"
          },
          "reportOptionalOperand": {
            "$ref": "#/definitions/reportOptionalOperand"
          },
          "reportRedeclaration": {
            "$ref": "#/definitions/reportRedeclaration"
          },
          "reportReturnType": {
            "$ref": "#/definitions/reportReturnType"
          },
          "reportTypedDictNotRequiredAccess": {
            "$ref": "#/definitions/reportTypedDictNotRequiredAccess"
          },
          "reportUntypedFunctionDecorator": {
            "$ref": "#/definitions/reportUntypedFunctionDecorator"
          },
          "reportUntypedClassDecorator": {
            "$ref": "#/definitions/reportUntypedClassDecorator"
          },
          "reportUntypedBaseClass": {
            "$ref": "#/definitions/reportUntypedBaseClass"
          },
          "reportUntypedNamedTuple": {
            "$ref": "#/definitions/reportUntypedNamedTuple"
          },
          "reportPrivateUsage": {
            "$ref": "#/definitions/reportPrivateUsage"
          },
          "reportTypeCommentUsage": {
            "$ref": "#/definitions/reportTypeCommentUsage"
          },
          "reportPrivateImportUsage": {
            "$ref": "#/definitions/reportPrivateImportUsage"
          },
          "reportConstantRedefinition": {
            "$ref": "#/definitions/reportConstantRedefinition"
          },
          "reportDeprecated": {
            "$ref": "#/definitions/reportDeprecated"
          },
          "reportIncompatibleMethodOverride": {
            "$ref": "#/definitions/reportIncompatibleMethodOverride"
          },
          "reportIncompatibleVariableOverride": {
            "$ref": "#/definitions/reportIncompatibleVariableOverride"
          },
          "reportInconsistentConstructor": {
            "$ref": "#/definitions/reportInconsistentConstructor"
          },
          "reportOverlappingOverload": {
            "$ref": "#/definitions/reportOverlappingOverload"
          },
          "reportPossiblyUnboundVariable": {
            "$ref": "#/definitions/reportPossiblyUnboundVariable"
          },
          "reportMissingSuperCall": {
            "$ref": "#/definitions/reportMissingSuperCall"
          },
          "reportUninitializedInstanceVariable": {
            "$ref": "#/definitions/reportUninitializedInstanceVariable"
          },
          "reportInvalidStringEscapeSequence": {
            "$ref": "#/definitions/reportInvalidStringEscapeSequence"
          },
          "reportUnknownParameterType": {
            "$ref": "#/definitions/reportUnknownParameterType"
          },
          "reportUnknownArgumentType": {
            "$ref": "#/definitions/reportUnknownArgumentType"
          },
          "reportUnknownLambdaType": {
            "$ref": "#/definitions/reportUnknownLambdaType"
          },
          "reportUnknownVariableType": {
            "$ref": "#/definitions/reportUnknownVariableType"
          },
          "reportUnknownMemberType": {
            "$ref": "#/definitions/reportUnknownMemberType"
          },
          "reportMissingParameterType": {
            "$ref": "#/definitions/reportMissingParameterType"
          },
          "reportMissingTypeArgument": {
            "$ref": "#/definitions/reportMissingTypeArgument"
          },
          "reportInvalidTypeVarUse": {
            "$ref": "#/definitions/reportInvalidTypeVarUse"
          },
          "reportCallInDefaultInitializer": {
            "$ref": "#/definitions/reportCallInDefaultInitializer"
          },
          "reportUnnecessaryIsInstance": {
            "$ref": "#/definitions/reportUnnecessaryIsInstance"
          },
          "reportUnnecessaryCast": {
            "$ref": "#/definitions/reportUnnecessaryCast"
          },
          "reportUnnecessaryComparison": {
            "$ref": "#/definitions/reportUnnecessaryComparison"
          },
          "reportUnnecessaryContains": {
            "$ref": "#/definitions/reportUnnecessaryContains"
          },
          "reportAssertAlwaysTrue": {
            "$ref": "#/definitions/reportAssertAlwaysTrue"
          },
          "reportSelfClsParameterName": {
            "$ref": "#/definitions/reportSelfClsParameterName"
          },
          "reportImplicitStringConcatenation": {
            "$ref": "#/definitions/reportImplicitStringConcatenation"
          },
          "reportUnboundVariable": {
            "$ref": "#/definitions/reportUnboundVariable"
          },
          "reportUnhashable": {
            "$ref": "#/definitions/reportUnhashable"
          },
          "reportUndefinedVariable": {
            "$ref": "#/definitions/reportUndefinedVariable"
          },
          "reportInvalidStubStatement": {
            "$ref": "#/definitions/reportInvalidStubStatement"
          },
          "reportIncompleteStub": {
            "$ref": "#/definitions/reportIncompleteStub"
          },
          "reportUnsupportedDunderAll": {
            "$ref": "#/definitions/reportUnsupportedDunderAll"
          },
          "reportUnusedCallResult": {
            "$ref": "#/definitions/reportUnusedCallResult"
          },
          "reportUnusedCoroutine": {
            "$ref": "#/definitions/reportUnusedCoroutine"
          },
          "reportUnusedExcept": {
            "$ref": "#/definitions/reportUnusedExcept"
          },
          "reportUnusedExpression": {
            "$ref": "#/definitions/reportUnusedExpression"
          },
          "reportUnnecessaryTypeIgnoreComment": {
            "$ref": "#/definitions/reportUnnecessaryTypeIgnoreComment"
          },
          "reportMatchNotExhaustive": {
            "$ref": "#/definitions/reportMatchNotExhaustive"
          },
          "reportShadowedImports": {
            "$ref": "#/definitions/reportShadowedImports"
          },
          "reportImplicitOverride": {
            "$ref": "#/definitions/reportImplicitOverride"
          },
          "extraPaths": {
            "$ref": "#/definitions/extraPaths"
          },
          "pythonVersion": {
            "$ref": "#/definitions/pythonVersion"
          },
          "pythonPlatform": {
            "$ref": "#/definitions/pythonPlatform"
          }
        }
      }
    }
  }
}
