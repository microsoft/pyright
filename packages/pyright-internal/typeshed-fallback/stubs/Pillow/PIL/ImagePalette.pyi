from _typeshed import Incomplete
from typing import Any

from .Image import Image

class ImagePalette:
    mode: Any
    rawmode: Any
    palette: Any
    colors: Any
    dirty: Any
    def __init__(self, mode: str = "RGB", palette: Incomplete | None = None, size: int = 0) -> None: ...
    def copy(self) -> ImagePalette: ...
    def getdata(self): ...
    def tobytes(self) -> bytes: ...
    tostring = tobytes
    def getcolor(self, color: tuple[int, int, int], image: Image | None = None) -> int: ...
    def save(self, fp) -> None: ...

def raw(rawmode, data): ...
def make_linear_lut(black, white): ...
def make_gamma_lut(exp): ...
def negative(mode: str = "RGB"): ...
def random(mode: str = "RGB"): ...
def sepia(white: str = "#fff0c0"): ...
def wedge(mode: str = "RGB"): ...
def load(filename): ...
