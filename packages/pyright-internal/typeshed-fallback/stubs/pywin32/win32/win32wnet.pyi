from _typeshed import Incomplete
from typing import Any

import _win32typing
from win32.lib.pywintypes import error as error

def __getattr__(name: str) -> Any: ...  # incomplete
def NCBBuffer(size): ...
def Netbios(ncb: _win32typing.NCB): ...
def WNetAddConnection2(
    NetResource: _win32typing.PyNETRESOURCE,
    Password: Incomplete | None = ...,
    UserName: Incomplete | None = ...,
    Flags: int = ...,
) -> None: ...
def WNetAddConnection3(
    HwndParent: int,
    NetResource: _win32typing.PyNETRESOURCE,
    Password: Incomplete | None = ...,
    UserName: Incomplete | None = ...,
    Flags: int = ...,
) -> None: ...
def WNetCancelConnection2(name: str, flags, force) -> None: ...
def WNetOpenEnum(scope, _type, usage, resource: _win32typing.PyNETRESOURCE) -> int: ...
def WNetCloseEnum(handle: int) -> None: ...
def WNetEnumResource(handle: int, maxExtries: int = ...) -> list[_win32typing.PyNETRESOURCE]: ...
def WNetGetUser(connection: str | None = ...) -> str: ...
def WNetGetUniversalName(localPath: str, infoLevel) -> str: ...
def WNetGetResourceInformation(NetResource: _win32typing.PyNETRESOURCE) -> tuple[_win32typing.PyNETRESOURCE, Incomplete]: ...
def WNetGetLastError() -> tuple[Incomplete, Incomplete, Incomplete]: ...
def WNetGetResourceParent(NetResource: _win32typing.PyNETRESOURCE) -> _win32typing.PyNETRESOURCE: ...
def WNetGetConnection(connection: str | None = ...) -> str: ...

NCB = _win32typing.PyNCB
NCBType = _win32typing.PyNCB
NETRESOURCE = _win32typing.PyNETRESOURCE
NETRESOURCEType = _win32typing.PyNETRESOURCE
